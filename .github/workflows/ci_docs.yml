# Build and deploy documentation.
#
# This workflow builds the documentation on Linux/macOS/Windows.
#
# It is run on every commit to the main and pull request branches, and also when a new
# release is published. In draft pull requests, only the job on Linux is triggered to
# save on Continuous Integration resources.
#
# On the main branch, the workflow also handles the documentation deployment:
#
# * Updating the development documentation by pushing the built HTML pages from the main
#   branch onto the dev folder of the gh-pages branch.
# * Updating the latest documentation link to the new release.
#
name: Docs

on:
  push:
    branches: [ main ]
    paths:
      - 'pygmt/**/*.py'
      - '!pygmt/tests/**'
      - 'doc/**'
      - 'examples/**'
      - 'README.md'
      - '.github/workflows/ci_docs.yml'
  pull_request:
    types: [opened, reopened, synchronize, ready_for_review]
    paths:
      - 'pygmt/**/*.py'
      - '!pygmt/tests/**'
      - 'doc/**'
      - 'examples/**'
      - 'README.md'
      - '.github/workflows/ci_docs.yml'
  workflow_dispatch:
  release:
    types:
      - published

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: ${{ github.ref != 'refs/heads/main' }}

permissions: {}

jobs:
  build-docs:
    name: ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    if: github.repository == 'GenericMappingTools/pygmt'
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        # Is it a draft Pull Request (true or false)?
        isDraft:
          - ${{ github.event.pull_request.draft }}
        # Only run jobs on Ubuntu for draft PRs
        exclude:
          - os: macos-latest
            isDraft: true
          - os: windows-latest
            isDraft: true
    timeout-minutes: 30
    defaults:
      run:
        shell: bash -l {0}

    steps:
      # Checkout current git repository
      - name: Checkout
        uses: actions/checkout@v4.2.2
        with:
          # fetch all history so that setuptools-scm works
          fetch-depth: 0
          persist-credentials: false

      - uses: ./.github/workflows/actions/build_docs
        with:
          os: ${{ matrix.os }}

      - name: Create the HTML ZIP archive and rename the PDF file
        run: |
          cd doc/_build/
          cp -r html/ pygmt-docs/
          zip -r pygmt-docs.zip pygmt-docs/
          mv latex/pygmt.pdf pygmt-docs.pdf
          cd ../..

      - name: Upload PDF as artifact for previewing on pull requests
        uses: actions/upload-artifact@v4.6.2
        if: github.event_name == 'pull_request' && matrix.os == 'ubuntu-latest'
        with:
          name: artifact-pygmt-docs-pdf
          path: doc/_build/pygmt-docs.pdf

      - name: Copy the HTML ZIP archive and PDF to the html folder for dev version
        run: cp -v doc/_build/pygmt-docs.zip doc/_build/pygmt-docs.pdf doc/_build/html/
        if: github.event_name == 'push' && matrix.os == 'ubuntu-latest'

      - name: Upload the HTML ZIP archive and PDF as release assets
        run: gh release upload ${REF_NAME} doc/_build/pygmt-docs.zip doc/_build/pygmt-docs.pdf
        if: github.event_name == 'release' && matrix.os == 'ubuntu-latest'
        env:
          GH_TOKEN: ${{ github.token }}
          REF_NAME: ${{ github.ref_name }}

      - name: Upload HMTL documentation artifact
        uses: actions/upload-artifact@v4.5.0
        with:
          name: pygmt-docs-html
          path: doc/_build/html/
        if: matrix.os == 'ubuntu-latest'

  deploy-docs:
    name: Deploy documentation
    needs: build-docs
    runs-on: ubuntu-latest
    if: (github.event_name == 'release' || github.event_name == 'push') && github.repository == 'GenericMappingTools/pygmt'
    permissions:
      contents: write

    steps:
      # Checkout current git repository
      - name: Checkout
        uses: actions/checkout@v4.2.2
        with:
          # fetch all history so that setuptools-scm works
          fetch-depth: 0
          persist-credentials: false

      - name: Checkout the gh-pages branch
        uses: actions/checkout@v4.2.2
        with:
          ref: gh-pages
          # Checkout to this folder instead of the current one
          path: deploy
          # Download the entire history
          fetch-depth: 0
          persist-credentials: true

      - name: Download HTML documentation artifact
        uses: actions/download-artifact@v4.1.8
        with:
          name: pygmt-docs-html
          path: pygmt-docs-html

      - name: Push the built HTML to gh-pages
        run: |
          # Detect if this is a release or from the main branch
          if [[ "${GITHUB_EVENT_NAME}" == "release" ]]; then
              # Get the tag name without the "refs/tags/" part
              version="${GITHUB_REF#refs/*/}"
          else
              version=dev
          fi
          echo "Deploying version: $version"
          # Make the new commit message. Needs to happen before cd into deploy to get
          # the right commit hash.
          message="Deploy $version from $(git rev-parse --short HEAD)"
          cd deploy/
          # Create some files in the root directory.
          # .nojekyll: Need to have this file so that GitHub doesn't try to run Jekyll
          touch .nojekyll
          # CNAME: Set the custom domain name
          echo "www.pygmt.org" > CNAME
          # index.html: Redirect to the latest version
          echo '<meta http-equiv="Refresh" content="0;url=latest/"/>' > index.html
          # Delete all the files and replace with our new set
          echo -e "\nRemoving old files from previous builds of ${version}:"
          rm -rvf ${version}
          echo -e "\nCopying HTML files to ${version}:"
          cp -Rvf ../pygmt-docs-html/ ${version}/
          # If this is a new release, update the link from /latest to it
          if [[ "${version}" != "dev" ]]; then
              echo -e "\nSetup link from ${version} to 'latest'."
              rm -f latest
              ln -sf ${version} latest
          fi
          # Stage the commit
          git add -A .
          echo -e "\nChanges to be applied:"
          git status
          # Configure git to be the GitHub Actions account
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git config user.name "github-actions[bot]"
          # If this is a dev build and the last commit was from a dev build (detect if
          # "dev" was in the previous commit message), reuse the same commit.
          if [[ "${version}" == "dev" && `git log -1 --format='%s'` == *"dev"* ]]; then
              echo -e "\nAmending last commit:"
              git commit --amend --reset-author -m "$message"
          else
              echo -e "\nMaking a new commit:"
              git commit -m "$message"
          fi
          # Make the push quiet just in case there is anything that could leak sensitive
          # information.
          echo -e "\nPushing changes to gh-pages."
          git push -fq origin gh-pages 2>&1 >/dev/null
          echo -e "\nFinished uploading generated files."
