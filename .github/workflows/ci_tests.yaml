# This workflow installs PyGMT and runs tests

name: Tests

on:
  push:
    branches: [ main ]
  pull_request:
    types: [opened, reopened, synchronize, ready_for_review]
    paths-ignore:
      - 'doc/**'
      - 'examples/**'
      - '*.md'
      - '*.json'
      - 'README.rst'
      - 'LICENSE.txt'
      - '.gitignore'
      - '.pylintrc'
  release:
    types:
      - published
  # Schedule daily tests
  schedule:
    - cron: '0 0 * * *'

jobs:
  test:
    name: ${{ matrix.os }} - Python ${{ matrix.python-version }} / NumPy ${{ matrix.numpy-version }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        python-version: [3.7, 3.9]
        os: [ubuntu-latest, macOS-latest, windows-latest]
        # Is it a draft Pull Request (true or false)?
        isDraft:
          - ${{ github.event.pull_request.draft }}
        # Only run one job (Ubuntu + Python 3.9) for draft PRs
        exclude:
          - os: macOS-latest
            isDraft: true
          - os: windows-latest
            isDraft: true
          # - os: ubuntu-latest
          #   python-version: 3.7
          #   isDraft: true
        # Pair Python 3.7 with NumPy 1.18 and Python 3.9 with NumPy 1.21
        # Only install optional packages on Python 3.9/NumPy 1.21
        include:
          - python-version: 3.7
            numpy-version: '1.18'
            optional-packages: ''
          - python-version: 3.9
            numpy-version: '1.21'
            optional-packages: 'geopandas ipython'
    defaults:
      run:
        shell: bash -l {0}

    # Environment variables used by codecov
    env:
      OS: ${{ matrix.os }}
      PYTHON: ${{ matrix.python-version }}
      NUMPY: ${{ matrix.numpy-version }}

    steps:
      # Cancel previous runs that are not completed
      - name: Cancel Previous Runs
        uses: styfle/cancel-workflow-action@0.9.1
        with:
          access_token: ${{ github.token }}

      # Checkout current git repository
      - name: Checkout
        uses: actions/checkout@v2.4.0
        with:
          # fecth all history so that setuptools-scm works
          fetch-depth: 0

      # Install Mambaforge with conda-forge dependencies
      - name: Setup Mambaforge
        uses: conda-incubator/setup-miniconda@v2.1.1
        with:
          activate-environment: pygmt
          python-version: ${{ matrix.python-version }}
          channels: conda-forge,nodefaults
          channel-priority: strict
          miniforge-version: latest
          miniforge-variant: Mambaforge
          mamba-version: "*"
          use-mamba: true

      # Install GMT and other required dependencies from conda-forge
      - name: Install dependencies
        run: |
          mamba install gmt=6.2.0 numpy=${{ matrix.numpy-version }} \
                        pandas xarray netCDF4 packaging \
                        ${{ matrix.optional-packages }} \
                        dvc make pytest>=6.0 \
                        pytest-cov pytest-mpl sphinx-gallery tomli

      # Show installed pkg information for postmortem diagnostic
      - name: List installed packages
        run: mamba list

      # Download cached remote files (artifacts) from GitHub
      - name: Download remote data from GitHub
        uses: dawidd6/action-download-artifact@v2.15.0
        with:
          workflow: cache_data.yaml
          workflow_conclusion: success
          name: gmt-cache
          path: .gmt

      # Move downloaded files to ~/.gmt directory and list them
      - name: Move and list downloaded remote files
        run: |
          mkdir -p ~/.gmt
          mv .gmt/* ~/.gmt
          # Change modification times of the two files, so GMT won't refresh it
          touch ~/.gmt/server/gmt_data_server.txt ~/.gmt/server/gmt_hash_server.txt
          ls -lhR ~/.gmt

      # Pull baseline image data from dvc remote (DAGsHub)
      - name: Pull baseline image data from dvc remote
        run: |
          dvc pull
          ls -lhR pygmt/tests/baseline/

      # Install the package that we want to test
      - name: Install the package
        run: |
          python setup.py sdist --formats=zip
          pip install dist/*

      # Run the tests
      - name: Test with pytest
        run: make test PYTEST_EXTRA="-r P"

      # Upload diff images on test failure
      - name: Upload diff images if any test fails
        uses: actions/upload-artifact@v2
        if: ${{ failure() }}
        with:
          name: artifact-${{ runner.os }}-${{ matrix.python-version }}
          path: tmp-test-dir-with-unique-name

      # Upload coverage to Codecov
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v2.1.0
        with:
          file: ./coverage.xml # optional
          env_vars: OS,PYTHON,NUMPY
          fail_ci_if_error: false
