
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "gallery/lines/line_segment_ends.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_gallery_lines_line_segment_ends.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_gallery_lines_line_segment_ends.py:


Line segment caps and joints
============================
PyGMT offers different appearances of line segment caps and joints. The desired
appearance can be set via the GMT default parameters :gmt-term:`PS_LINE_CAP`
(``"butt"``, ``"round"``, or ``"square"`` [Default]) as well as :gmt-term:`PS_LINE_JOIN`
(``"bevel"``, ``"round"``, and ``"miter"`` [Default]) and :gmt-term:`PS_MITER_LIMIT`
(limit on the angle at the mitered joint below which a bevel is applied).

.. GENERATED FROM PYTHON SOURCE LINES 12-77



.. image-sg:: /gallery/lines/images/sphx_glr_line_segment_ends_001.png
   :alt: line segment ends
   :srcset: /gallery/lines/images/sphx_glr_line_segment_ends_001.png
   :class: sphx-glr-single-img





.. code-block:: Python

    import numpy as np
    import pygmt

    # Set up dictionary for colors
    dict_col = {
        "round": "green4",
        "square": "steelblue",
        "butt": "orange",
        "miter": "steelblue",
        "bevel": "orange",
    }

    # Create new Figure instance
    fig = pygmt.Figure()

    # -----------------------------------------------------------------------------
    # Top: PS_LINE_CAP

    # Create sample data
    x = np.array([30, 170])
    y = np.array([70, 70])

    fig.basemap(region=[0, 260, 0, 100], projection="x1p", frame="rltb")

    for line_cap in ["butt", "round", "square"]:
        # Change GMT default locally
        with pygmt.config(PS_LINE_CAP=line_cap):
            color = dict_col[line_cap]
            # Draw a 10-point thick line with 20-point long segments and gaps
            # Use the local PS_LINE_CAP setting
            fig.plot(x=x, y=y, pen=f"10p,{color},20_20")

        # Draw a 1-point thick black solid line to highlight segment cap appearance
        fig.plot(x=x, y=y, pen="1p,black,solid")
        # Plot data points as circles
        fig.plot(x=x, y=y, style="c0.1c", fill="white", pen="0.5p,")
        # Add label for PS_LINE_CAP setting
        fig.text(text=line_cap, x=x[-1] + 20, y=y[-1], justify="LM")

        y = y - 20

    fig.shift_origin(yshift="-h")

    # -----------------------------------------------------------------------------
    # Bottom: PS_LINE_JOIN and PS_MITER_LIMIT

    x = np.array([5, 95, 65])
    y = np.array([10, 70, 10])

    fig.basemap(region=[0, 260, 0, 100], projection="x1p", frame="rltb")

    for line_join in ["bevel", "round", "miter"]:
        with pygmt.config(PS_LINE_JOIN=line_join, PS_MITER_LIMIT=1):
            color = dict_col[line_join]
            # Draw a 7-point thick solid line
            # Use the local PS_LINE_JOIN and PS_MITER_LIMIT settings
            fig.plot(x=x, y=y, pen=f"7p,{color},solid")

        fig.plot(x=x, y=y, pen="1p,black,solid")
        fig.plot(x=x, y=y, style="c0.1c", fill="white", pen="0.5p")
        fig.text(text=line_join, x=x[1] - 10, y=y[1], justify="RB")

        x = x + 75

    fig.show()


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 0.208 seconds)


.. _sphx_glr_download_gallery_lines_line_segment_ends.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: line_segment_ends.ipynb <line_segment_ends.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: line_segment_ends.py <line_segment_ends.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: line_segment_ends.zip <line_segment_ends.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
