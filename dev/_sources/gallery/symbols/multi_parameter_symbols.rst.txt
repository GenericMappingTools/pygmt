
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "gallery/symbols/multi_parameter_symbols.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_gallery_symbols_multi_parameter_symbols.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_gallery_symbols_multi_parameter_symbols.py:


Multi-parameter symbols
=======================

The :meth:`pygmt.Figure.plot` method can plot individual multi-parameter symbols by
passing the corresponding shortcuts (**e**, **j**, **r**, **R**, **w**) to the ``style``
parameter:

- **e**: ellipse
- **j**: rotated rectangle
- **r**: rectangle
- **R**: rounded rectangle
- **w**: pie wedge

.. GENERATED FROM PYTHON SOURCE LINES 18-20

.. code-block:: Python

    import pygmt








.. GENERATED FROM PYTHON SOURCE LINES 21-38

We can plot multi-parameter symbols using the same symbol style. We need to define
locations (lon, lat) via the ``x`` and ``y`` parameters (scalar for a single symbol or
1-D list for several ones) and two or three symbol parameters after those shortcuts
via the ``style`` parameter.

The multi-parameter symbols in the ``style`` parameter are defined as:

- **e**: ellipse, ``direction/major_axis/minor_axis``
- **j**: rotated rectangle, ``direction/width/height``
- **r**: rectangle, ``width/height``
- **R**: rounded rectangle, ``width/height/radius``
- **w**: pie wedge, ``diameter/startdir/stopdir``, the last two arguments are
  directions given in degrees counter-clockwise from horizontal. Append **+i** and the
  desired value to apply an inner diameter.

Upper-case versions **E**, **J**, and **W** are similar to **e**, **j**, and **w**
but expect geographic azimuths and distances.

.. GENERATED FROM PYTHON SOURCE LINES 38-57

.. code-block:: Python


    fig = pygmt.Figure()
    fig.basemap(region=[0, 7, 0, 2], projection="x3c", frame=True)

    # Ellipse
    fig.plot(x=0.5, y=1, style="e45/3/1", fill="orange", pen="2p,black")
    # Rotated rectangle
    fig.plot(x=1.5, y=1, style="j120/5/0.5", fill="red3", pen="2p,black")
    # Rectangle
    fig.plot(x=3, y=1, style="r4/1.5", fill="dodgerblue", pen="2p,black")
    # Rounded rectangle
    fig.plot(x=4.5, y=1, style="R1.25/4/0.5", fill="seagreen", pen="2p,black")
    # Pie wedge
    fig.plot(x=5.5, y=1, style="w2.5/45/330", fill="lightgray", pen="2p,black")
    # Ring sector
    fig.plot(x=6.5, y=1, style="w2.5/45/330+i1", fill="lightgray", pen="2p,black")

    fig.show()




.. image-sg:: /gallery/symbols/images/sphx_glr_multi_parameter_symbols_001.png
   :alt: multi parameter symbols
   :srcset: /gallery/symbols/images/sphx_glr_multi_parameter_symbols_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 58-71

We can also plot symbols with varying parameters via defining those values in a 2-D
list or numpy array (``[[parameters]]`` for a single symbol or
``[[parameters_1],[parameters_2],[parameters_i]]`` for several ones) or using an
appropriately formatted input file and passing it to ``data``.

The symbol parameters in the 2-D list or numpy array are defined as:

- **e**: ellipse, ``[[lon, lat, direction, major_axis, minor_axis]]``
- **j**: rotated rectangle, ``[[lon, lat, direction, width, height]]``
- **r**: rectangle, ``[[lon, lat, width, height]]``
- **R**: rounded rectangle, ``[[lon, lat, width, height, radius]]``
- **w**: pie wedge, ``[[lon, lat, diameter, startdir, stopdir]]``, the last two
  arguments are directions given in degrees counter-clockwise from horizontal

.. GENERATED FROM PYTHON SOURCE LINES 71-96

.. code-block:: Python


    fig = pygmt.Figure()
    fig.basemap(region=[0, 7, 0, 4], projection="x3c", frame=["xa1f0.2", "ya0.5f0.1"])

    # Ellipse
    data = [[0.5, 1, 45, 3, 1], [0.5, 3, 135, 2, 1]]
    fig.plot(data=data, style="e", fill="orange", pen="2p,black")
    # Rotated rectangle
    data = [[1.5, 1, 120, 5, 0.5], [1.5, 3, 50, 3, 0.5]]
    fig.plot(data=data, style="j", fill="red3", pen="2p,black")
    # Rectangle
    data = [[3, 1, 4, 1.5], [3, 3, 3, 1.5]]
    fig.plot(data=data, style="r", fill="dodgerblue", pen="2p,black")
    # Rounded rectangle
    data = [[4.5, 1, 1.25, 4, 0.5], [4.5, 3, 1.25, 2.0, 0.2]]
    fig.plot(data=data, style="R", fill="seagreen", pen="2p,black")
    # Pie wedge
    data = [[5.5, 1, 2.5, 45, 330], [5.5, 3, 1.5, 60, 300]]
    fig.plot(data=data, style="w", fill="lightgray", pen="2p,black")
    # Ring sector
    data = [[6.5, 1, 2.5, 45, 330], [6.5, 3, 1.5, 60, 300]]
    fig.plot(data=data, style="w+i1", fill="lightgray", pen="2p,black")

    fig.show()




.. image-sg:: /gallery/symbols/images/sphx_glr_multi_parameter_symbols_002.png
   :alt: multi parameter symbols
   :srcset: /gallery/symbols/images/sphx_glr_multi_parameter_symbols_002.png
   :class: sphx-glr-single-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 0.429 seconds)


.. _sphx_glr_download_gallery_symbols_multi_parameter_symbols.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: multi_parameter_symbols.ipynb <multi_parameter_symbols.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: multi_parameter_symbols.py <multi_parameter_symbols.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: multi_parameter_symbols.zip <multi_parameter_symbols.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
