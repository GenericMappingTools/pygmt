
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "tutorials/advanced/contour_map.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_tutorials_advanced_contour_map.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_tutorials_advanced_contour_map.py:


Creating a map with contour lines
=================================

Plotting a contour map is handled by :meth:`pygmt.Figure.grdcontour`.

.. GENERATED FROM PYTHON SOURCE LINES 7-13

.. code-block:: default


    import pygmt

    # Load sample earth relief data
    grid = pygmt.datasets.load_earth_relief(resolution="05m", region=[-92.5, -82.5, -3, 7])








.. GENERATED FROM PYTHON SOURCE LINES 15-25

Create contour plot
-------------------

The :meth:`pygmt.Figure.grdcontour` method takes the grid input.
It plots annotated contour lines, which are thicker and have the
elevation/depth written on them, and unannotated contour lines.
In the example below, the default contour line intervals are 500 meters,
with an annotated contour line every 1000 meters.
By default, it plots the map with the
equidistant cylindrical projection and with no frame.

.. GENERATED FROM PYTHON SOURCE LINES 25-30

.. code-block:: default


    fig = pygmt.Figure()
    fig.grdcontour(grid=grid)
    fig.show()




.. image-sg:: /tutorials/advanced/images/sphx_glr_contour_map_001.png
   :alt: contour map
   :srcset: /tutorials/advanced/images/sphx_glr_contour_map_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    <IPython.core.display.Image object>




.. GENERATED FROM PYTHON SOURCE LINES 31-37

Contour line settings
---------------------

Use the ``annotation`` and ``interval`` arguments to adjust contour line
intervals. In the example below, there are contour intervals every 250 meters
and annotated contour lines every 1,000 meters.

.. GENERATED FROM PYTHON SOURCE LINES 37-46

.. code-block:: default


    fig = pygmt.Figure()
    fig.grdcontour(
        annotation=1000,
        interval=250,
        grid=grid,
    )
    fig.show()




.. image-sg:: /tutorials/advanced/images/sphx_glr_contour_map_002.png
   :alt: contour map
   :srcset: /tutorials/advanced/images/sphx_glr_contour_map_002.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    <IPython.core.display.Image object>




.. GENERATED FROM PYTHON SOURCE LINES 47-53

Contour limits
--------------

The ``limit`` argument sets the minimum and maximum values for the contour
lines. The argument takes the low and high values, and is either a list (as
below) or a string ``limit="-4000/-2000"``.

.. GENERATED FROM PYTHON SOURCE LINES 53-63

.. code-block:: default


    fig = pygmt.Figure()
    fig.grdcontour(
        annotation=1000,
        interval=250,
        grid=grid,
        limit=[-4000, -2000],
    )
    fig.show()




.. image-sg:: /tutorials/advanced/images/sphx_glr_contour_map_003.png
   :alt: contour map
   :srcset: /tutorials/advanced/images/sphx_glr_contour_map_003.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    <IPython.core.display.Image object>




.. GENERATED FROM PYTHON SOURCE LINES 64-69

Map settings
------------

The :meth:`pygmt.Figure.grdcontour` method accepts additional arguments,
including setting the projection and frame.

.. GENERATED FROM PYTHON SOURCE LINES 69-81

.. code-block:: default


    fig = pygmt.Figure()
    fig.grdcontour(
        annotation=1000,
        interval=250,
        grid=grid,
        limit=[-4000, -2000],
        projection="M10c",
        frame=True,
    )
    fig.show()




.. image-sg:: /tutorials/advanced/images/sphx_glr_contour_map_004.png
   :alt: contour map
   :srcset: /tutorials/advanced/images/sphx_glr_contour_map_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    <IPython.core.display.Image object>




.. GENERATED FROM PYTHON SOURCE LINES 82-91

Adding a colormap
-----------------

The :meth:`pygmt.Figure.grdimage` method can be used to add a
colormap to the contour map. It must be called prior to
:meth:`pygmt.Figure.grdcontour` to keep the contour lines visible on the
final map. If the ``projection`` argument is specified in the
:meth:`pygmt.Figure.grdimage` method, it does not need to be repeated in the
:meth:`pygmt.Figure.grdcontour` method.

.. GENERATED FROM PYTHON SOURCE LINES 91-106

.. code-block:: default


    fig = pygmt.Figure()
    fig.grdimage(
        grid=grid,
        cmap="haxby",
        projection="M10c",
        frame=True,
    )
    fig.grdcontour(
        annotation=1000,
        interval=250,
        grid=grid,
        limit=[-4000, -2000],
    )
    fig.show()



.. image-sg:: /tutorials/advanced/images/sphx_glr_contour_map_005.png
   :alt: contour map
   :srcset: /tutorials/advanced/images/sphx_glr_contour_map_005.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    <IPython.core.display.Image object>





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  8.229 seconds)


.. _sphx_glr_download_tutorials_advanced_contour_map.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: contour_map.py <contour_map.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: contour_map.ipynb <contour_map.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
