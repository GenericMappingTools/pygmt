
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "tutorials/basics/plot.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_tutorials_basics_plot.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_tutorials_basics_plot.py:


Plotting data points
====================

GMT shines when it comes to plotting data on a map. We can use some sample data
that is packaged with GMT to try this out. PyGMT provides access to these
datasets through the :mod:`pygmt.datasets` package. If you don't have the data
files already, they are automatically downloaded and saved to a cache directory
the first time you use them (usually ``~/.gmt/cache``).

.. GENERATED FROM PYTHON SOURCE LINES 13-15

.. code-block:: Python

    import pygmt








.. GENERATED FROM PYTHON SOURCE LINES 16-19

For example, let's load the sample dataset of tsunami generating earthquakes
around Japan using :func:`pygmt.datasets.load_sample_data`.
The data are loaded as a :class:`pandas.DataFrame`.

.. GENERATED FROM PYTHON SOURCE LINES 19-23

.. code-block:: Python


    data = pygmt.datasets.load_sample_data(name="japan_quakes")
    data.head()






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }

        .dataframe tbody tr th {
            vertical-align: top;
        }

        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th>year</th>
          <th>month</th>
          <th>day</th>
          <th>latitude</th>
          <th>longitude</th>
          <th>depth_km</th>
          <th>magnitude</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>0</th>
          <td>1987</td>
          <td>1</td>
          <td>4</td>
          <td>49.77</td>
          <td>149.29</td>
          <td>489</td>
          <td>4.1</td>
        </tr>
        <tr>
          <th>1</th>
          <td>1987</td>
          <td>1</td>
          <td>9</td>
          <td>39.90</td>
          <td>141.68</td>
          <td>67</td>
          <td>6.8</td>
        </tr>
        <tr>
          <th>2</th>
          <td>1987</td>
          <td>1</td>
          <td>9</td>
          <td>39.82</td>
          <td>141.64</td>
          <td>84</td>
          <td>4.0</td>
        </tr>
        <tr>
          <th>3</th>
          <td>1987</td>
          <td>1</td>
          <td>14</td>
          <td>42.56</td>
          <td>142.85</td>
          <td>102</td>
          <td>6.5</td>
        </tr>
        <tr>
          <th>4</th>
          <td>1987</td>
          <td>1</td>
          <td>16</td>
          <td>42.79</td>
          <td>145.10</td>
          <td>54</td>
          <td>5.1</td>
        </tr>
      </tbody>
    </table>
    </div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 24-25

Set the region for the plot to be slightly larger than the data bounds.

.. GENERATED FROM PYTHON SOURCE LINES 25-33

.. code-block:: Python

    region = [
        data.longitude.min() - 1,
        data.longitude.max() + 1,
        data.latitude.min() - 1,
        data.latitude.max() + 1,
    ]
    region





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    [np.float64(131.29), np.float64(150.89), np.float64(34.02), np.float64(50.77)]



.. GENERATED FROM PYTHON SOURCE LINES 34-36

We'll use the :meth:`pygmt.Figure.plot` method to plot circles on the
earthquake epicenters.

.. GENERATED FROM PYTHON SOURCE LINES 36-43

.. code-block:: Python


    fig = pygmt.Figure()
    fig.basemap(region=region, projection="M15c", frame=True)
    fig.coast(land="black", water="skyblue")
    fig.plot(x=data.longitude, y=data.latitude, style="c0.3c", fill="white", pen="black")
    fig.show()




.. image-sg:: /tutorials/basics/images/sphx_glr_plot_001.png
   :alt: plot
   :srcset: /tutorials/basics/images/sphx_glr_plot_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 44-52

We used the style ``c0.3c`` which means "circles with a diameter of 0.3
centimeters". The ``pen`` parameter controls the outline of the symbols and
the ``fill`` parameter controls the fill.

We can map the size of the circles to the earthquake magnitude by passing an
array to the ``size`` parameter. Because the magnitude is on a logarithmic
scale, it helps to show the differences by scaling the values using a power
law.

.. GENERATED FROM PYTHON SOURCE LINES 52-66

.. code-block:: Python


    fig = pygmt.Figure()
    fig.basemap(region=region, projection="M15c", frame=True)
    fig.coast(land="black", water="skyblue")
    fig.plot(
        x=data.longitude,
        y=data.latitude,
        size=0.02 * (2**data.magnitude),
        style="cc",
        fill="white",
        pen="black",
    )
    fig.show()




.. image-sg:: /tutorials/basics/images/sphx_glr_plot_002.png
   :alt: plot
   :srcset: /tutorials/basics/images/sphx_glr_plot_002.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 67-79

Notice that we didn't include the size in the ``style`` parameter this time,
just the symbol ``c`` (circles) and the unit ``c`` (centimeters). So in
this case, the size will be interpreted as being in centimeters.

We can also map the colors of the markers to the depths by passing an array
to the ``fill`` parameter and providing a colormap name (``cmap``). We can
even use the new matplotlib colormap "viridis". Here, we first create a
continuous colormap ranging from the minimum depth to the maximum depth of
the earthquakes using :func:`pygmt.makecpt`, then set ``cmap=True`` in
:meth:`pygmt.Figure.plot` to use the colormap. At the end of the plot, we
also plot a colorbar showing the colormap used in the plot.


.. GENERATED FROM PYTHON SOURCE LINES 79-96

.. code-block:: Python


    fig = pygmt.Figure()
    fig.basemap(region=region, projection="M15c", frame=True)
    fig.coast(land="black", water="skyblue")
    pygmt.makecpt(cmap="viridis", series=[data.depth_km.min(), data.depth_km.max()])
    fig.plot(
        x=data.longitude,
        y=data.latitude,
        size=0.02 * 2**data.magnitude,
        fill=data.depth_km,
        cmap=True,
        style="cc",
        pen="black",
    )
    fig.colorbar(frame="xaf+lDepth (km)")
    fig.show()




.. image-sg:: /tutorials/basics/images/sphx_glr_plot_003.png
   :alt: plot
   :srcset: /tutorials/basics/images/sphx_glr_plot_003.png
   :class: sphx-glr-single-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 0.769 seconds)


.. _sphx_glr_download_tutorials_basics_plot.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot.ipynb <plot.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot.py <plot.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: plot.zip <plot.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
