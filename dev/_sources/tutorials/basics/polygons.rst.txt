
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "tutorials/basics/polygons.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_tutorials_basics_polygons.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_tutorials_basics_polygons.py:


Plotting polygons
=================

Plotting polygons is handled by the :meth:`pygmt.Figure.plot` method.

This tutorial focuses on input data given as NumPy arrays. Besides NumPy arrays,
array-like objects are supported. Here, a polygon is a closed shape defined by a series
of data points with x and y coordinates, connected by line segments, with the start and
end points being identical. For plotting a :class:`geopandas.GeoDataFrame` object with
polygon geometries, e.g., to create a choropleth map, see the gallery example
:doc:`Choropleth map </gallery/maps/choropleth_map>`.

.. GENERATED FROM PYTHON SOURCE LINES 16-19

.. code-block:: Python

    import numpy as np
    import pygmt








.. GENERATED FROM PYTHON SOURCE LINES 20-24

Plot polygons
-------------

Set up sample data points as NumPy arrays for the x and y values.

.. GENERATED FROM PYTHON SOURCE LINES 24-28

.. code-block:: Python


    x = np.array([-2, 1, 3, 0, -4, -2])
    y = np.array([-3, -1, 1, 3, 2, -3])








.. GENERATED FROM PYTHON SOURCE LINES 29-34

Create a Cartesian plot via the :meth:`pygmt.Figure.basemap` method. Pass arrays to
the ``x`` and ``y`` parameters of the :meth:`pygmt.Figure.plot` method. Without
further adjustments, lines are drawn between the data points. By default, the lines
are 0.25-points thick, black, and solid. In this example, the data points are chosen
to make the lines form a polygon.

.. GENERATED FROM PYTHON SOURCE LINES 34-40

.. code-block:: Python


    fig = pygmt.Figure()
    fig.basemap(region=[-5, 5, -5, 5], projection="X5c", frame=True)
    fig.plot(x=x, y=y)
    fig.show()




.. image-sg:: /tutorials/basics/images/sphx_glr_polygons_001.png
   :alt: polygons
   :srcset: /tutorials/basics/images/sphx_glr_polygons_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 41-44

The ``pen`` parameter can be used to adjust the lines or outline of the polygon. The
argument passed to ``pen`` is one string with the comma-separated optional values
*width*,\ *color*,\ *style*.

.. GENERATED FROM PYTHON SOURCE LINES 44-51

.. code-block:: Python


    fig = pygmt.Figure()
    fig.basemap(region=[-5, 5, -5, 5], projection="X5c", frame=True)
    # Use a 2-points thick, darkred, dashed outline
    fig.plot(x=x, y=y, pen="2p,darkred,dashed")
    fig.show()




.. image-sg:: /tutorials/basics/images/sphx_glr_polygons_002.png
   :alt: polygons
   :srcset: /tutorials/basics/images/sphx_glr_polygons_002.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 52-56

Use the ``fill`` parameter to fill the polygon with a color or
:doc:`pattern </techref/patterns>`. Note, that there are no lines drawn between the
data points by default if ``fill`` is used. Use the ``pen`` parameter to add an
outline around the polygon.

.. GENERATED FROM PYTHON SOURCE LINES 56-64

.. code-block:: Python


    fig = pygmt.Figure()
    fig.basemap(region=[-5, 5, -5, 5], projection="X5c", frame=True)
    # Fill the polygon with color "orange"
    fig.plot(x=x, y=y, fill="orange")
    fig.show()





.. image-sg:: /tutorials/basics/images/sphx_glr_polygons_003.png
   :alt: polygons
   :srcset: /tutorials/basics/images/sphx_glr_polygons_003.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 65-70

Close polygons
--------------

Set up sample data points as NumPy arrays for the x and y values. Now, the data points
do not form a polygon.

.. GENERATED FROM PYTHON SOURCE LINES 70-74

.. code-block:: Python


    x = np.array([-2, 1, 3, 0, -4])
    y = np.array([-3, -1, 1, 3, 2])








.. GENERATED FROM PYTHON SOURCE LINES 75-76

The ``close`` parameter can be used to force the polygon to be closed.

.. GENERATED FROM PYTHON SOURCE LINES 76-87

.. code-block:: Python


    fig = pygmt.Figure()
    fig.basemap(region=[-5, 5, -5, 5], projection="X5c", frame=True)
    fig.plot(x=x, y=y, pen=True)

    fig.shift_origin(xshift="w+1c")

    fig.basemap(region=[-5, 5, -5, 5], projection="X5c", frame=True)
    fig.plot(x=x, y=y, pen=True, close=True)
    fig.show()




.. image-sg:: /tutorials/basics/images/sphx_glr_polygons_004.png
   :alt: polygons
   :srcset: /tutorials/basics/images/sphx_glr_polygons_004.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 88-89

When using the ``fill`` parameter, the polygon is automatically closed.

.. GENERATED FROM PYTHON SOURCE LINES 89-100

.. code-block:: Python


    fig = pygmt.Figure()
    fig.basemap(region=[-5, 5, -5, 5], projection="X5c", frame=True)
    fig.plot(x=x, y=y, pen=True)

    fig.shift_origin(xshift="w+1c")

    fig.basemap(region=[-5, 5, -5, 5], projection="X5c", frame=True)
    fig.plot(x=x, y=y, pen=True, fill="orange")
    fig.show()




.. image-sg:: /tutorials/basics/images/sphx_glr_polygons_005.png
   :alt: polygons
   :srcset: /tutorials/basics/images/sphx_glr_polygons_005.png
   :class: sphx-glr-single-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 0.523 seconds)


.. _sphx_glr_download_tutorials_basics_polygons.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: polygons.ipynb <polygons.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: polygons.py <polygons.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: polygons.zip <polygons.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
