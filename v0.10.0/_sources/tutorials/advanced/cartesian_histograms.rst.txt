
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "tutorials/advanced/cartesian_histograms.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_tutorials_advanced_cartesian_histograms.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_tutorials_advanced_cartesian_histograms.py:


Cartesian histograms
====================

Cartesian histograms can be generated using the :meth:`pygmt.Figure.histogram`
method. In this tutorial, different histogram related aspects are addressed:

- Using vertical and horizontal bars
- Using stair-steps
- Showing counts and frequency percent
- Adding annotations to the bars
- Showing cumulative values
- Using color and pattern as fill for the bars
- Using overlaid, stacked, and grouped bars

.. GENERATED FROM PYTHON SOURCE LINES 16-23

.. code-block:: default




    # Import the required packages
    import numpy as np
    import pygmt








.. GENERATED FROM PYTHON SOURCE LINES 25-26

Generate random data from a normal distribution:

.. GENERATED FROM PYTHON SOURCE LINES 26-39

.. code-block:: default


    np.random.seed(100)

    # Mean of distribution
    mean = 100
    # Standard deviation of distribution
    stddev = 20

    # Create two data sets
    data01 = np.random.normal(mean, stddev, 42)
    data02 = np.random.normal(mean, stddev * 2, 42)









.. GENERATED FROM PYTHON SOURCE LINES 40-48

Vertical and horizontal bars
----------------------------
To define the width of the bins, the ``series`` parameter has to be
specified. The bars can be filled via the ``fill`` parameter with either a
color or a pattern (see later in this tutorial). Use the ``pen`` parameter
to adjust width, color, and style of the outlines. By default, a histogram
with vertical bars is created. Horizontal bars can be achieved via
``horizontal=True``.

.. GENERATED FROM PYTHON SOURCE LINES 48-95

.. code-block:: default


    # Create new figure instance
    fig = pygmt.Figure()

    # Create histogram for data01 with vertical bars
    fig.histogram(
        # Define the plot range as a list of xmin, xmax, ymin, ymax
        # Let ymin and ymax determined automatically by setting both to the same
        # value
        region=[0, 200, 0, 0],
        projection="X10c",  # Cartesian projection with a width of 10 centimeters
        # Add frame, annotations (a), ticks (f), and y-axis label (+l) "Counts"
        # The numbers give the steps of annotations and ticks
        frame=["WStr", "xaf10", "ya1f1+lCounts"],
        data=data01,
        # Set the bin width via the "series" parameter
        series=10,
        # Fill the bars with color "red3"
        fill="red3",
        # Draw a 1-point thick solid outline in "darkgray" around the bars
        pen="1p,darkgray,solid",
        # Choose counts via the "histtype" parameter
        histtype=0,
    )

    # Shift plot origin 12 centimeters to the right
    fig.shift_origin(xshift="12c")

    # Create histogram for data01 with horizontal bars
    fig.histogram(
        region=[0, 200, 0, 0],
        projection="X10c",
        frame=["WStr", "xaf10", "ya1f1+lCounts"],
        data=data01,
        series=10,
        fill="red3",
        pen="1p,darkgray,solid",
        histtype=0,
        # Use horizontal bars
        # Please note the flip of the x and y axes regarding annotations, ticks,
        # gridlines, and axis labels
        horizontal=True,
    )

    fig.show()





.. image-sg:: /tutorials/advanced/images/sphx_glr_cartesian_histograms_001.png
   :alt: cartesian histograms
   :srcset: /tutorials/advanced/images/sphx_glr_cartesian_histograms_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 96-100

Stair-steps
-----------
A stair-step diagram can be created by setting ``stairs=True``. Then only
the outer outlines of the bars are drawn, and no internal bars are visible.

.. GENERATED FROM PYTHON SOURCE LINES 100-137

.. code-block:: default


    # Create new figure instance
    fig = pygmt.Figure()

    # Create histogram for data01
    fig.histogram(
        region=[0, 200, 0, 0],
        projection="X10c",
        frame=["WSne", "xaf10", "ya1f1+lCounts"],
        data=data01,
        series=10,
        # Draw a 1-point thick dotted outline in "red3"
        pen="1p,red3,dotted",
        histtype=0,
        # Draw stair-steps in stead of bars
        stairs=True,
    )

    # Shift plot origin 12 centimeters to the right
    fig.shift_origin(xshift="12c")

    # Create histogram for data02
    fig.histogram(
        region=[0, 200, 0, 0],
        projection="X10c",
        frame=["WSne", "xaf10", "ya1f1+lCounts"],
        data=data02,
        series=10,
        # Draw a 1.5-point thick dashed outline in "orange"
        pen="1.5p,orange,dashed",
        histtype=0,
        stairs=True,
    )

    fig.show()





.. image-sg:: /tutorials/advanced/images/sphx_glr_cartesian_histograms_002.png
   :alt: cartesian histograms
   :srcset: /tutorials/advanced/images/sphx_glr_cartesian_histograms_002.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 138-144

Counts and frequency percent
----------------------------
By default, a histogram showing the counts in each bin is created
(``histtype=0``). To show the frequency percent set the ``histtpye``
parameter to ``1``. For further options please have a look at the
documentation of :meth:`pygmt.Figure.histogram`.

.. GENERATED FROM PYTHON SOURCE LINES 144-181

.. code-block:: default


    # Create new figure instance
    fig = pygmt.Figure()

    # Create histogram for data02 showing counts
    fig.histogram(
        region=[0, 200, 0, 0],
        projection="X10c",
        frame=["WSnr", "xaf10", "ya1f1+lCounts"],
        data=data02,
        series=10,
        fill="orange",
        pen="1p,darkgray,solid",
        # Choose counts via the "histtype" parameter
        histtype=0,
    )

    # Shift plot origin 11 centimeters to the right
    fig.shift_origin(xshift="11c")

    # Create histogram for data02 showing frequency percent
    fig.histogram(
        region=[0, 200, 0, 0],
        projection="X10c",
        # Add suffix % (+u)
        frame=["lSnE", "xaf10", "ya2f1+u%+lFrequency percent"],
        data=data02,
        series=10,
        fill="orange",
        pen="1p,darkgray,solid",
        # Choose frequency percent via the "histtype" parameter
        histtype=1,
    )

    fig.show()





.. image-sg:: /tutorials/advanced/images/sphx_glr_cartesian_histograms_003.png
   :alt: cartesian histograms
   :srcset: /tutorials/advanced/images/sphx_glr_cartesian_histograms_003.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 182-188

Cumulative values
-----------------
To create a histogram showing the cumulative values set ``cumulative=True``.
Here, the bars of the cumulative histogram are filled with a pattern via
the ``fill`` parameter. Annotate each bar with the counts it represents
using the ``annotate`` parameter.

.. GENERATED FROM PYTHON SOURCE LINES 188-231

.. code-block:: default


    # Create new figure instance
    fig = pygmt.Figure()

    # Create histogram for data01 showing the counts per bin
    fig.histogram(
        region=[0, 200, 0, len(data01) + 1],
        projection="X10c",
        frame=["WSne", "xaf10", "ya5f1+lCounts"],
        data=data01,
        series=10,
        fill="red3",
        pen="1p,darkgray,solid",
        histtype=0,
        # Annotate each bar with the counts it represents
        annotate=True,
    )

    # Shift plot origin 11 centimeters to the right
    fig.shift_origin(xshift="11c")

    # Create histogram for data01 showing the cumulative counts
    fig.histogram(
        region=[0, 200, 0, len(data01) + 1],
        projection="X10c",
        frame=["wSnE", "xaf10", "ya5f1+lCumulative counts"],
        data=data01,
        series=10,
        # Use pattern (p) number 8 as fill for the bars
        # Set the background (+b) to white [Default]
        # Set the foreground (+f) to black [Default]
        fill="p8+bwhite+fblack",
        pen="1p,darkgray,solid",
        histtype=0,
        # Show cumulative counts
        cumulative=True,
        # Offset (+o) the label by 10 points in negative y-direction
        annotate="+o-10p",
    )

    fig.show()





.. image-sg:: /tutorials/advanced/images/sphx_glr_cartesian_histograms_004.png
   :alt: cartesian histograms
   :srcset: /tutorials/advanced/images/sphx_glr_cartesian_histograms_004.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 232-243

Overlaid bars
-------------
Overlaid or overlapping bars can be achieved by plotting two or serveral
histograms, each for one data set, on top of each other. The legend entry
can be specified via the ``label`` parameter.

Limitations of histograms with overlaid bars are:

- Mixing of colors or/and patterns
- Visually more colors or/and patterns than data sets
- Visually a "third histogram" (or more in case of more than two data sets)

.. GENERATED FROM PYTHON SOURCE LINES 243-279

.. code-block:: default


    # Create new figure instance
    fig = pygmt.Figure()

    # Create histogram for data01
    fig.histogram(
        region=[0, 200, 0, 0],
        projection="X10c",
        frame=["WSne", "xaf10", "ya1f1+lCounts"],
        data=data01,
        series=10,
        fill="red3",
        pen="1p,darkgray,solid",
        histtype=0,
        # Set legend entry
        label="data01",
    )

    # Create histogram for data02
    # It is plotted on top of the histogram for data01
    fig.histogram(
        data=data02,
        series=10,
        # Fill bars with color "orange", use a transparency of 50% ("@50")
        fill="orange@50",
        pen="1p,darkgray,solid",
        histtype=0,
        label="data02",
    )

    # Add legend
    fig.legend()

    fig.show()





.. image-sg:: /tutorials/advanced/images/sphx_glr_cartesian_histograms_005.png
   :alt: cartesian histograms
   :srcset: /tutorials/advanced/images/sphx_glr_cartesian_histograms_005.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 280-291

Stacked bars
------------
Histograms with stacked bars are not directly supported by PyGMT. Thus,
before plotting, combined data sets have to be created from the single data
sets. Then, stacked bars can be achieved similar to overlaid bars via
plotting two or several histograms on top of each other.

Limitations of histograms with stacked bars are:

- No common baseline
- Partly not directly clear whether overlaid or stacked bars

.. GENERATED FROM PYTHON SOURCE LINES 291-330

.. code-block:: default


    # Combine the two data sets to one data set
    data_merge = np.concatenate((data01, data02), axis=None)

    # Create new figure instance
    fig = pygmt.Figure()

    # Create histogram for data02 by using the combined data set
    fig.histogram(
        region=[0, 200, 0, 0],
        projection="X10c",
        frame=["WSne", "xaf10", "ya1f1+lCounts"],
        data=data_merge,
        series=10,
        fill="orange",
        pen="1p,darkgray,solid",
        histtype=0,
        # The combined data set appears in the final histogram visually
        # as data set data02
        label="data02",
    )

    # Create histogram for data01
    # It is plotted on top of the histogram for data02
    fig.histogram(
        data=data01,
        series=10,
        fill="red3",
        pen="1p,darkgray,solid",
        histtype=0,
        label="data01",
    )

    # Add legend
    fig.legend()

    fig.show()





.. image-sg:: /tutorials/advanced/images/sphx_glr_cartesian_histograms_006.png
   :alt: cartesian histograms
   :srcset: /tutorials/advanced/images/sphx_glr_cartesian_histograms_006.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 331-340

Grouped bars
------------
By setting the ``barwidth`` parameter in respect to the values passed to the
``series`` parameter histograms with grouped bars can be created.

Limitations of histograms with grouped bars are:

- Careful setting width and position of the bars in respect to the bin width
- Difficult to see the variations of the single data sets

.. GENERATED FROM PYTHON SOURCE LINES 340-380

.. code-block:: default


    # Width used for binning the data
    binwidth = 10

    # Create new figure instance
    fig = pygmt.Figure()

    # Create histogram for data01
    fig.histogram(
        region=[0, 200, 0, 0],
        projection="X10c",
        frame=["WSne", "xaf10g10", "ya1f1+lCounts"],
        data=data01,
        series=binwidth,
        fill="red3",
        pen="1p,darkgray,solid",
        histtype=0,
        # Calculate the bar width in respect to the bin width, here for two
        # data sets half of the bin width
        # Offset (+o) the bars to align each bar with the left limit of the
        # corresponding bin
        barwidth=f"{binwidth/2}+o-{binwidth/4}",
        label="data01",
    )

    # Create histogram for data02
    fig.histogram(
        data=data02,
        series=binwidth,
        fill="orange",
        pen="1p,darkgray,solid",
        histtype=0,
        barwidth=f"{binwidth/2}+o{binwidth/4}",
        label="data02",
    )

    # Add legend
    fig.legend()

    fig.show()



.. image-sg:: /tutorials/advanced/images/sphx_glr_cartesian_histograms_007.png
   :alt: cartesian histograms
   :srcset: /tutorials/advanced/images/sphx_glr_cartesian_histograms_007.png
   :class: sphx-glr-single-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  4.827 seconds)


.. _sphx_glr_download_tutorials_advanced_cartesian_histograms.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example




    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: cartesian_histograms.py <cartesian_histograms.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: cartesian_histograms.ipynb <cartesian_histograms.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
