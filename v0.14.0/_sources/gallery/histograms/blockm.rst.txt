
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "gallery/histograms/blockm.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_gallery_histograms_blockm.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_gallery_histograms_blockm.py:


Blockmean
=========

The :func:`pygmt.blockmean` function calculates different quantities
inside blocks/bins whose dimensions are defined via the ``spacing`` parameter.
The following examples show how to calculate the averages of the given values
inside each bin and how to report the number of points inside each bin.

.. GENERATED FROM PYTHON SOURCE LINES 12-62



.. image-sg:: /gallery/histograms/images/sphx_glr_blockm_001.png
   :alt: blockm
   :srcset: /gallery/histograms/images/sphx_glr_blockm_001.png
   :class: sphx-glr-single-img





.. code-block:: Python

    import pygmt

    # Load sample data
    data = pygmt.datasets.load_sample_data(name="japan_quakes")
    # Select only needed columns
    data = data[["longitude", "latitude", "depth_km"]]

    # Set the region for the plot
    region = [130, 152.5, 32.5, 52.5]
    # Define spacing in x and y direction (150x150 arc-minute blocks)
    spacing = "150m"

    fig = pygmt.Figure()

    # Calculate mean depth in kilometers from all events within
    # 150x150 arc-minute bins using blockmean
    df = pygmt.blockmean(data=data, region=region, spacing=spacing)
    # Convert to grid
    grd = pygmt.xyz2grd(data=df, region=region, spacing=spacing)

    fig.grdimage(
        grid=grd,
        region=region,
        frame=["af", "+tMean earthquake depth inside each block"],
        cmap="batlow",
    )
    # Plot slightly transparent landmasses on top
    fig.coast(land="darkgray", transparency=40)
    # Plot original data points
    fig.plot(x=data.longitude, y=data.latitude, style="c0.3c", fill="white", pen="1p,black")
    fig.colorbar(frame="x+lkm")

    fig.shift_origin(xshift="w+5c")

    # Calculate number of total locations within 150x150 arc-minute bins
    # with blockmean's summary parameter
    df = pygmt.blockmean(data=data, region=region, spacing=spacing, summary="n")
    grd = pygmt.xyz2grd(data=df, region=region, spacing=spacing)

    fig.grdimage(
        grid=grd,
        region=region,
        frame=["af", "+tNumber of points inside each block"],
        cmap="batlow",
    )
    fig.coast(land="darkgray", transparency=40)
    fig.plot(x=data.longitude, y=data.latitude, style="c0.3c", fill="white", pen="1p,black")
    fig.colorbar(frame="x+lcount")

    fig.show()


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 0.559 seconds)


.. _sphx_glr_download_gallery_histograms_blockm.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: blockm.ipynb <blockm.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: blockm.py <blockm.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: blockm.zip <blockm.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
