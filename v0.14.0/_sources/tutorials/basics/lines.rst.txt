
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "tutorials/basics/lines.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_tutorials_basics_lines.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_tutorials_basics_lines.py:


Plotting lines
==============

Plotting lines is handled by the :meth:`pygmt.Figure.plot` method.

.. GENERATED FROM PYTHON SOURCE LINES 9-11

.. code-block:: Python

    import pygmt








.. GENERATED FROM PYTHON SOURCE LINES 12-19

Plot lines
----------

Create a Cartesian figure using the :meth:`pygmt.Figure.basemap` method. Pass lists
containing two values to the ``x`` and ``y`` parameters of the
:meth:`pygmt.Figure.plot` method. By default, a 0.25-points thick, black, solid
line is drawn between these two data points.

.. GENERATED FROM PYTHON SOURCE LINES 19-27

.. code-block:: Python


    fig = pygmt.Figure()
    fig.basemap(region=[0, 10, 0, 10], projection="X15c/10c", frame=True)

    fig.plot(x=[1, 5], y=[5, 9])

    fig.show()




.. image-sg:: /tutorials/basics/images/sphx_glr_lines_001.png
   :alt: lines
   :srcset: /tutorials/basics/images/sphx_glr_lines_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 28-30

Additional line segments can be added by including more data points in the lists
passed to ``x`` and ``y``.

.. GENERATED FROM PYTHON SOURCE LINES 30-38

.. code-block:: Python


    fig = pygmt.Figure()
    fig.basemap(region=[0, 10, 0, 10], projection="X15c/10c", frame=True)

    fig.plot(x=[1, 5, 8], y=[5, 9, 4])

    fig.show()




.. image-sg:: /tutorials/basics/images/sphx_glr_lines_002.png
   :alt: lines
   :srcset: /tutorials/basics/images/sphx_glr_lines_002.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 39-41

To plot multiple lines, :meth:`pygmt.Figure.plot` needs to be used for each line
separately.

.. GENERATED FROM PYTHON SOURCE LINES 41-51

.. code-block:: Python


    fig = pygmt.Figure()
    fig.basemap(region=[0, 10, 0, 10], projection="X15c/10c", frame=True)

    fig.plot(x=[1, 5, 8], y=[5, 9, 4])
    fig.plot(x=[2, 4, 9], y=[3, 7, 5])

    fig.show()





.. image-sg:: /tutorials/basics/images/sphx_glr_lines_003.png
   :alt: lines
   :srcset: /tutorials/basics/images/sphx_glr_lines_003.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 52-57

Change line attributes
----------------------

The line attributes can be set by the ``pen`` parameter which takes a string
argument with the optional values *width*,\ *color*,\ *style*.

.. GENERATED FROM PYTHON SOURCE LINES 57-67

.. code-block:: Python


    fig = pygmt.Figure()
    fig.basemap(region=[0, 10, 0, 10], projection="X15c/10c", frame=True)

    # Set the pen width to "5p" (5 points), and use the default color "black" and the
    # default style "solid"
    fig.plot(x=[1, 8], y=[3, 9], pen="5p")

    fig.show()




.. image-sg:: /tutorials/basics/images/sphx_glr_lines_004.png
   :alt: lines
   :srcset: /tutorials/basics/images/sphx_glr_lines_004.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 68-70

The line color can be set and is added after the line width to the ``pen``
parameter.

.. GENERATED FROM PYTHON SOURCE LINES 70-79

.. code-block:: Python


    fig = pygmt.Figure()
    fig.basemap(region=[0, 10, 0, 10], projection="X15c/10c", frame=True)

    # Set the line color to "red", use the default style "solid"
    fig.plot(x=[1, 8], y=[3, 9], pen="5p,red")

    fig.show()




.. image-sg:: /tutorials/basics/images/sphx_glr_lines_005.png
   :alt: lines
   :srcset: /tutorials/basics/images/sphx_glr_lines_005.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 80-82

The line style can be set and is added after the line width or color to the
``pen`` parameter.

.. GENERATED FROM PYTHON SOURCE LINES 82-91

.. code-block:: Python


    fig = pygmt.Figure()
    fig.basemap(region=[0, 10, 0, 10], projection="X15c/10c", frame=True)

    # Set the line style to "..-" (dot dot dash), use the default color "black"
    fig.plot(x=[1, 8], y=[3, 9], pen="5p,..-")

    fig.show()




.. image-sg:: /tutorials/basics/images/sphx_glr_lines_006.png
   :alt: lines
   :srcset: /tutorials/basics/images/sphx_glr_lines_006.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 92-95

The line width, color, and style can all be set in the same ``pen`` parameter.
For a gallery example showing other ``pen`` settings, see
:doc:`/gallery/lines/linestyles`.

.. GENERATED FROM PYTHON SOURCE LINES 95-104

.. code-block:: Python


    fig = pygmt.Figure()
    fig.basemap(region=[0, 10, 0, 10], projection="X15c/10c", frame=True)

    # Draw a 7-points thick, green line with style "-.-" (dash dot dash)
    fig.plot(x=[1, 8], y=[3, 9], pen="7p,green,-.-")

    fig.show()




.. image-sg:: /tutorials/basics/images/sphx_glr_lines_007.png
   :alt: lines
   :srcset: /tutorials/basics/images/sphx_glr_lines_007.png
   :class: sphx-glr-single-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 0.948 seconds)


.. _sphx_glr_download_tutorials_basics_lines.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: lines.ipynb <lines.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: lines.py <lines.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: lines.zip <lines.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
