
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "tutorials/advanced/draping_on_3d_surface.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_tutorials_advanced_draping_on_3d_surface.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_tutorials_advanced_draping_on_3d_surface.py:


Draping a dataset on top of a topographic surface
==================================================

It can be visually appealing to "drape" a dataset over a topographic surface. This can
be accomplished using the ``drapegrid`` parameter of :meth:`pygmt.Figure.grdview`.

This tutorial consists of two examples:

1. Draping a grid

2. Draping an image

.. GENERATED FROM PYTHON SOURCE LINES 16-22

.. code-block:: Python


    # Load the required packages
    import pygmt
    import rasterio
    import xarray as xr








.. GENERATED FROM PYTHON SOURCE LINES 23-28

1. Drapping a grid
------------------

In the first example, the seafloor crustal age is plotted with color-coding on top of
the topographic map of an area of the Mid-Atlantic Ridge.

.. GENERATED FROM PYTHON SOURCE LINES 28-40

.. code-block:: Python


    # Define the study area in degrees East or North
    region_2d = [-50, 0, 36, 70]  # [lon_min, lon_max, lat_min, lat_max]

    # Download elevation and crustal age grids for the study region with a resolution of 10
    # arc-minutes and load them into xarray.DataArrays
    grd_relief = pygmt.datasets.load_earth_relief(resolution="10m", region=region_2d)
    grd_age = pygmt.datasets.load_earth_age(resolution="10m", region=region_2d)

    # Determine the 3-D region from the minimum and maximum values of the relief grid
    region_3d = [*region_2d, grd_relief.min().to_numpy(), grd_relief.max().to_numpy()]





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    gmtread [NOTICE]: Remote data courtesy of GMT data server oceania [http://oceania.generic-mapping-tools.org]
    gmtread [NOTICE]: EarthByte Earth Seafloor Age at 10x10 arc minutes reduced by Gaussian Cartesian filtering (52.4 km fullwidth) [Seton et al., 2020].
    gmtread [NOTICE]:   -> Download grid file [1.3M]: earth_age_10m_g.grd




.. GENERATED FROM PYTHON SOURCE LINES 41-48

The topographic surface is created based on the grid passed to the ``grid`` parameter
of :meth:`pygmt.Figure.grdview`; here we use a grid of the Earth relief. To add a
color-coding based on *another* grid we have to pass a second grid to the
``drapegrid`` parameter; here we use a grid of the crustal age. In this case the
colormap specified via the ``cmap`` parameter applies to the grid passed to
``drapegrid``, not to ``grid``. The azimuth and elevation of the 3-D plot are set via
the ``perspective`` parameter.

.. GENERATED FROM PYTHON SOURCE LINES 48-78

.. code-block:: Python


    fig = pygmt.Figure()

    # Set up colormap for the crustal age
    pygmt.config(COLOR_NAN="lightgray")
    pygmt.makecpt(cmap="batlow", series=[0, 200, 1], reverse=True, overrule_bg=True)

    fig.grdview(
        projection="M12c",  # Mercator projection with a width of 12 centimeters
        region=region_3d,
        grid=grd_relief,  # Use elevation grid for z values
        drapegrid=grd_age,  # Use crustal age grid for color-coding
        cmap=True,  # Use colormap created for the crustal age
        surftype="i",  # Create an image plot
        # Use an illumination from the azimuthal directions 0째 (north) and 270째
        # (west) with a normalization via a cumulative Laplace distribution for
        # the shading
        shading="+a0/270+ne0.6",
        perspective=[157.5, 30],  # Azimuth and elevation for the 3-D plot
        zsize="1.5c",
        plane="+gdarkgray",
        frame=True,
    )

    # Add colorbar for the crustal age
    fig.colorbar(frame=["x+lseafloor crustal age", "y+lMyr"], position="+n")

    fig.show()





.. image-sg:: /tutorials/advanced/images/sphx_glr_draping_on_3d_surface_001.png
   :alt: draping on 3d surface
   :srcset: /tutorials/advanced/images/sphx_glr_draping_on_3d_surface_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 79-87

2. Draping an image
-------------------

In the second example, the flag of the European Union (EU) is plotted on top of a
topographic map of northwest Europe. This example is modified from
:gmt-docs:`GMT example 32 </gallery/ex32.html>`.
We have to consider the dimension of the image we want to drap. The image we will
download in this example has 1000 x 667 pixels, i.e. an aspect ratio of 3 x 2.

.. GENERATED FROM PYTHON SOURCE LINES 87-106

.. code-block:: Python


    # Define the study area in degrees East or North, with an extend of 6 degrees for
    # the longitude and 4 degrees for the latitude
    region_2d = [3, 9, 50, 54]  # [lon_min, lon_max, lat_min, lat_max]

    # Download elevation grid for the study region with a resolution of 30 arc-seconds and
    # pixel registration and load it into an xarray.DataArray
    grd_relief = pygmt.datasets.load_earth_relief(resolution="30s", region=region_2d)

    # Determine the 3-D region from the minimum and maximum values of the relief grid
    region_3d = [*region_2d, grd_relief.min().to_numpy(), grd_relief.max().to_numpy()]

    # Download an PNG image of the flag of the EU using rasterio and load it into a
    # xarray.DataArray
    url_to_image = "https://upload.wikimedia.org/wikipedia/commons/thumb/b/b7/Flag_of_Europe.svg/1000px-Flag_of_Europe.svg.png"
    with rasterio.open(url_to_image) as dataset:
        data = dataset.read()
        drapegrid = xr.DataArray(data, dims=("band", "y", "x"))





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    grdblend [NOTICE]: Remote data courtesy of GMT data server oceania [http://oceania.generic-mapping-tools.org]
    grdblend [NOTICE]: SRTM15 Earth Relief v2.6 at 30x30 arc seconds reduced by Gaussian Cartesian filtering (2.6 km fullwidth) [Tozer et al., 2019].
    grdblend [NOTICE]:   -> Download 15x15 degree grid tile (earth_relief_30s_g): N45E000
    /home/runner/micromamba/envs/pygmt/lib/python3.13/site-packages/rasterio/__init__.py:356: NotGeoreferencedWarning: Dataset has no geotransform, gcps, or rpcs. The identity matrix will be returned.
      dataset = DatasetReader(path, driver=driver, sharing=sharing, **kwargs)




.. GENERATED FROM PYTHON SOURCE LINES 107-111

Again we create a 3-D plot with :meth:`pygmt.Figure.grdview` and pass an Earth relief
grid to the ``grid`` parameter to create the topographic surface. But now we pass the
PNG image which was loaded into an :class:`xarray.DataArray` to the ``drapgrid``
parameter.

.. GENERATED FROM PYTHON SOURCE LINES 111-137

.. code-block:: Python


    fig = pygmt.Figure()

    # Set up a colormap with two colors for the EU flag: blue (0/51/153) for the background
    # (value 0 in the netCDF file -> lower half of 0-255 range) and yellow (255/204/0) for
    # the stars (value 255 -> upper half)
    pygmt.makecpt(cmap="0/51/153,255/204/0", series=[0, 256, 128])

    fig.grdview(
        projection="M12c",  # Mercator projection with a width of 12 centimeters
        region=region_3d,
        grid=grd_relief,  # Use elevation grid for z values
        drapegrid=drapegrid,  # Drap image grid for the EU flag on top
        cmap=True,  # Use colormap defined for the EU flag
        surftype="i",  # Create an image plot
        # Use an illumination from the azimuthal directions 0째 (north) and 270째 (west) with
        # a normalization via a cumulative Laplace distribution for the shading
        shading="+a0/270+ne0.6",
        perspective=[157.5, 30],  # Define azimuth, elevation for the 3-D plot
        zsize="1c",
        plane="+gdarkgray",
        frame=True,
    )

    fig.show()




.. image-sg:: /tutorials/advanced/images/sphx_glr_draping_on_3d_surface_002.png
   :alt: draping on 3d surface
   :srcset: /tutorials/advanced/images/sphx_glr_draping_on_3d_surface_002.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    /home/runner/micromamba/envs/pygmt/lib/python3.13/site-packages/rasterio/__init__.py:366: NotGeoreferencedWarning: The given matrix is equal to Affine.identity or its flipped counterpart. GDAL may ignore this matrix and save no geotransform without raising an error. This behavior is somewhat driver-specific.
      dataset = writer(





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 5.492 seconds)


.. _sphx_glr_download_tutorials_advanced_draping_on_3d_surface.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: draping_on_3d_surface.ipynb <draping_on_3d_surface.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: draping_on_3d_surface.py <draping_on_3d_surface.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: draping_on_3d_surface.zip <draping_on_3d_surface.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
