
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "tutorials/advanced/configuration.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_tutorials_advanced_configuration.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_tutorials_advanced_configuration.py:


Configuring PyGMT defaults
==========================

Default GMT parameters can be set globally or locally using
:class:`pygmt.config`.

.. GENERATED FROM PYTHON SOURCE LINES 8-11

.. code-block:: default


    import pygmt








.. GENERATED FROM PYTHON SOURCE LINES 13-21

Configuring default GMT parameters
----------------------------------

Users can override default parameters either temporarily (locally) or
permanently (globally) using :meth:`pygmt.config`. The full list of default
parameters that can be changed can be found at :gmt-docs:`gmt.conf.html`.

We demonstrate the usage of :meth:`pygmt.config` by configuring a map plot.

.. GENERATED FROM PYTHON SOURCE LINES 21-29

.. code-block:: default


    # Start with a basic figure with the default style
    fig = pygmt.Figure()
    fig.basemap(region=[115, 119.5, 4, 7.5], projection="M10c", frame=True)
    fig.coast(land="black", water="skyblue")

    fig.show()




.. image-sg:: /tutorials/advanced/images/sphx_glr_configuration_001.png
   :alt: configuration
   :srcset: /tutorials/advanced/images/sphx_glr_configuration_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    <IPython.core.display.Image object>




.. GENERATED FROM PYTHON SOURCE LINES 30-41

Globally overriding defaults
----------------------------

The ``MAP_FRAME_TYPE`` parameter specifies the style of map frame to use, of
which there are 5 options: ``fancy`` (default, seen above), ``fancy+``,
``plain``, ``graph`` (which does not apply to geographical maps) and
``inside``.

The ``FORMAT_GEO_MAP`` parameter controls the format of geographical tick
annotations. The default uses degrees and minutes. Here we specify the ticks
to be a decimal number of degrees.

.. GENERATED FROM PYTHON SOURCE LINES 41-53

.. code-block:: default


    fig = pygmt.Figure()

    # Configuration for the 'current figure'.
    pygmt.config(MAP_FRAME_TYPE="plain")
    pygmt.config(FORMAT_GEO_MAP="ddd.xx")

    fig.basemap(region=[115, 119.5, 4, 7.5], projection="M10c", frame=True)
    fig.coast(land="black", water="skyblue")

    fig.show()




.. image-sg:: /tutorials/advanced/images/sphx_glr_configuration_002.png
   :alt: configuration
   :srcset: /tutorials/advanced/images/sphx_glr_configuration_002.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    <IPython.core.display.Image object>




.. GENERATED FROM PYTHON SOURCE LINES 54-65

Locally overriding defaults
---------------------------

It is also possible to temporarily override the default parameters, which is
very useful for limiting the scope of changes to a particular plot.
:class:`pygmt.config` is implemented as a context manager, which handles the
setup and teardown of a GMT session. Python users are likely familiar with
the ``with open(...) as file:`` snippet, which returns a ``file`` context
manager. In this way, it can be used to override a parameter for a single
command, or a sequence of commands. An application of :class:`pygmt.config`
as a context manager is shown below:

.. GENERATED FROM PYTHON SOURCE LINES 65-81

.. code-block:: default


    fig = pygmt.Figure()

    # This will have a fancy+ frame
    with pygmt.config(MAP_FRAME_TYPE="fancy+"):
        fig.basemap(region=[115, 119.5, 4, 7.5], projection="M10c", frame=True)
    fig.coast(land="black", water="skyblue")

    # Shift plot origin down by 10cm to plot another map
    fig.shift_origin(yshift="-10c")

    # This figure retains the default "fancy" frame
    fig.basemap(region=[115, 119.5, 4, 7.5], projection="M10c", frame=True)
    fig.coast(land="black", water="skyblue")

    fig.show()



.. image-sg:: /tutorials/advanced/images/sphx_glr_configuration_003.png
   :alt: configuration
   :srcset: /tutorials/advanced/images/sphx_glr_configuration_003.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    <IPython.core.display.Image object>





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  4.117 seconds)


.. _sphx_glr_download_tutorials_advanced_configuration.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: configuration.py <configuration.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: configuration.ipynb <configuration.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
